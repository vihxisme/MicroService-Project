package com.service.apicomposition.mappers;

import java.math.BigDecimal;
import java.math.RoundingMode;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

import com.service.apicomposition.resources.DiscountClientResource;
import com.service.apicomposition.resources.ProductClientResource;

import jakarta.inject.Named;

@Component
public class ComponentMapper {

  private Logger logger = LoggerFactory.getLogger(ComponentMapper.class);

  @Named("calculateFinalPrice")
  public BigDecimal calculateFinalPrice(ProductClientResource product, DiscountClientResource discount) {
    if (discount == null) {
      return product.getPrice(); // Kh√¥ng c√≥ gi·∫£m gi√°
    }

    // üõ† Ki·ªÉm tra xem gi·∫£m gi√° c√≥ √°p d·ª•ng ƒë∆∞·ª£c kh√¥ng
    boolean isApplicable = discount.getTargetId() == null ||
        (discount.getTargetType().toUpperCase().equals("PRODUCT") && discount.getTargetId().equals(product.getId())) ||
        (discount.getTargetType().toUpperCase().equals("CATEGORIE")
            && discount.getTargetId().equals(product.getCategorieId()));

    if (!isApplicable) {
      return product.getPrice();
    }

    // üõ† Ki·ªÉm tra minOrderValue (n·∫øu c√≥)
    if (discount.getMinOrderValue() != null && product.getPrice().compareTo(discount.getMinOrderValue()) < 0) {
      return product.getPrice(); // Kh√¥ng ƒë·ªß ƒëi·ªÅu ki·ªán ƒë·ªÉ nh·∫≠n gi·∫£m gi√°
    }

    // üõ† √Åp d·ª•ng gi·∫£m gi√° theo ph·∫ßn trƒÉm ho·∫∑c s·ªë ti·ªÅn c·ª• th·ªÉ
    BigDecimal finalPrice = product.getPrice();

    if (discount.getDiscountPercentage() != null && discount.getDiscountPercentage().compareTo(BigDecimal.ZERO) > 0) {
      finalPrice = finalPrice.subtract(finalPrice.multiply(discount.getDiscountPercentage())
          .divide(BigDecimal.valueOf(100), RoundingMode.HALF_UP));
    } else if (discount.getDiscountAmount() != null && discount.getDiscountAmount().compareTo(BigDecimal.ZERO) > 0) {
      finalPrice = finalPrice.subtract(discount.getDiscountAmount());
    }

    return finalPrice.max(BigDecimal.ZERO); // Kh√¥ng cho gi√° √¢m
  }

}
